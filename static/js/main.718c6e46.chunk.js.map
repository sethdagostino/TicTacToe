{"version":3,"sources":["styles/Styles.js","components/Banner.js","components/Circle.js","components/Times.js","containers/Cell.js","TicTacToeGridLogic.js","containers/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["symbolStyle","display","width","height","margin","position","left","bottom","top","blankCell","cursor","right","Banner","this","props","newGame","react_default","a","createElement","className","id","whichTurn","gameWon","gameOver","React","Component","Circle","index_es","style","Object","objectSpread","color","icon","Times","Cell","symbol","components_Times","components_Circle","onClick","isThisAWinningMove","grid","cellNumber","row","getRowForCellNumber","col","getColForCellNumber","rowVictory","colVictory","isADiagonalNumber","topLeftToBottomRightVictory","topRightToBottomLeftVictory","diagonalVictory","Math","floor","GameBoard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleClickBlankCell","bind","assertThisInitialized","handleResetClick","makeMove","switchTurns","console","log","concat","revisedGrid","changeCellNumberToSymbol","setState","winningSymbol","boardIsFull","_this2","components_Banner","containers_Cell","library","add","far","faTimes","App","containers_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.718c6e46.chunk.js","sourcesContent":["//Exported style objects for inline styling different components\r\n\nexport const symbolStyle = {\n    display: \"block\",\n    width: \"80%\",\n    height: \"auto\",\n    margin: \"auto auto\",\n    position: \"absolute\",\n    left: \"10%\",\n    bottom: \"10%\",\n    top: \"10%\"\n}\n\nexport const blankCell = {\n    position: \"absolute\",\n    cursor: \"pointer\",\n    top: \"0\",\n    bottom: \"0\",\n    right: \"0\",\n    left: \"0\"\n}\n\nexport const bannerStyle = {\n    color: \"#0099ff\",\n    width: \"125%\",\n    borderRadius: 8,\n    border: \"2px solid #0099ff\",\n    marginTop: 20,\n    marginBottom: 20\n}\n","//Presentational component to display announcements of the game, like whose\r\n//turn it is, who won, when it is game over, etc.\r\n\r\nimport React from 'react';\nimport { bannerStyle } from '../styles/Styles'\n\nclass Banner extends React.Component {\n    render() {\n        if(this.props.newGame) {\n            return (\n                <div className=\"centered-container\"  id=\"banner\">\n                    <h1>Tic-Tac-Toe</h1>\n                    <h2>New Game! Let's start with {this.props.whichTurn}'s turn!</h2>\n                </div>\n            )\n        }\n        //If the game is won, display the winner\n        if(this.props.gameWon) {\n            return (\n                <div className=\"centered-container\"  id=\"banner\">\n                    <h1>Tic-Tac-Toe</h1>\n                    <h2>Congratulations! {this.props.whichTurn}'s Won!</h2>\n                    <h3>Hit RESET button to play again!</h3>\n                </div>\n            );\n        }\n        //This is the case the game is over by cat's game and they still hit a button\n        else if(this.props.gameOver) {\n            return (\n                <div className=\"centered-container\"  id=\"banner\">\n                    <h1>Tic-Tac-Toe</h1>\n                    <h3>GAME OVER! Hit RESET button to play again!</h3>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className=\"centered-container\"  id=\"banner\">\n                    <h1>Tic-Tac-Toe</h1>\n                    <h2>Now it is {this.props.whichTurn}'s turn!</h2>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Banner;\r\n","//Presentational component to represent a Circle, O, in TicTacToe\n\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { symbolStyle } from '../styles/Styles.js'\n\nconst Circle = () => (\n    <FontAwesomeIcon style={{...symbolStyle, color: \"skyBlue\"}} icon={['far', 'circle']}/>\n);\n\nexport default Circle;\n","//Presentational component to represent a Times, X, in TicTacToe\n\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { symbolStyle } from '../styles/Styles.js'\n\nconst Times = () => (\n    <FontAwesomeIcon style={{...symbolStyle, color: \"#E34444\"}} icon=\"times\"/>\n);\n\nexport default Times;\n","//Container component to hold a O, X, or blank of one cell during TicTacToe\nimport React from 'react';\nimport Circle from '../components/Circle';\nimport Times from '../components/Times';\nimport { blankCell } from '../styles/Styles';\n\nclass Cell extends React.Component {\n\n    render() {\n        if(this.props.symbol === 'X') {\n            return <Times />\n        }\n        else if(this.props.symbol === 'O') {\n            return <Circle />\n        }\n        else {\n            return <div style={blankCell} onClick={this.props.onClick}></div>\n        }\n    }\n}\n\nexport default Cell;\r\n","//EXPORTED FUNCTIONS FOR DOING TICTACTOE LOGIC IN GAMEBOARD\r\n\nexport const changeCellNumberToSymbol = (grid, cellNumber, symbol) => {\n    let row = getRowForCellNumber(cellNumber);\n    let col = getColForCellNumber(cellNumber);\n    grid[row][col] = symbol;\n}\n\nexport const isThisAWinningMove = (grid, cellNumber, symbol) => {\n    let row = getRowForCellNumber(cellNumber);\n    let col = getColForCellNumber(cellNumber);\n    return rowVictory(grid, row, symbol) || colVictory(grid, col, symbol) || diagonalVictory(grid, cellNumber, symbol);\n}\n\nexport const boardIsFull = (grid) => {\n    for(let row = 0; row < 3; row++) {\n        for(let col = 0; col < 3; col++) {\n            if(grid[row][col] === '')\n                return false;\n        }\n    }\n    return true;\n}\n\n//HELPER FUNCTIONS ==========================================================\n\n\nfunction rowVictory(grid, row, symbol) {\n    return (grid[row][0] === symbol) && (grid[row][1] === symbol) && (grid[row][2] === symbol);\n}\n\nfunction colVictory(grid, col, symbol) {\n    return (grid[0][col] === symbol) && (grid[1][col] === symbol) && (grid[2][col] === symbol);\n}\n\nfunction diagonalVictory(grid, cellNumber, symbol) {\n    if(isADiagonalNumber(cellNumber)) {\n        return topLeftToBottomRightVictory(grid, symbol) || topRightToBottomLeftVictory(grid, symbol);\n    }\n    return false;\n}\n\nfunction topLeftToBottomRightVictory(grid, symbol) {\n    return (grid[0][0] === symbol) && (grid[1][1] === symbol) && (grid[2][2] === symbol);\n}\n\nfunction topRightToBottomLeftVictory(grid, symbol) {\n    return (grid[0][2] === symbol) && (grid[1][1] === symbol) && (grid[2][0] === symbol);\n}\n\nfunction getRowForCellNumber(cellNumber) {\n    return Math.floor(cellNumber / 3);\n}\n\nfunction getColForCellNumber(cellNumber) {\n    return cellNumber % 3;\n}\n\nfunction isADiagonalNumber(cellNumber) {\n    return cellNumber % 2 === 0;\n}\n","/* Container component that includes a Banner announcing things about the game,\n * a table of Cells for representing the X's and O's, and a reset button. This is\n * the only stateful component. I use logic from TicTacToeGridLogic to do functions\n * related to a tic tac toe grid that weren't limited to the display, that way that\n * code could be reused. \n*/\n\nimport React from 'react';\nimport Banner from '../components/Banner';\nimport Cell from './Cell';\nimport { changeCellNumberToSymbol, isThisAWinningMove, boardIsFull } from '../TicTacToeGridLogic'\n\nclass GameBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newGame: true,\n            gameOver: false,\n            whichTurn: \"X\",\n            grid: [['', '', ''], ['', '', ''], ['', '', '']],\n            gameWon: false\n        }\n        this.handleClickBlankCell = this.handleClickBlankCell.bind(this);\n        this.handleResetClick = this.handleResetClick.bind(this);\n        this.makeMove = this.makeMove.bind(this);\n        this.switchTurns = this.switchTurns.bind(this);\n    }\n\n    makeMove(symbol, cellNumber) {\n        console.log(`Setting cell ${cellNumber} to a ${symbol}`);\n        let revisedGrid = this.state.grid;\n        changeCellNumberToSymbol(revisedGrid, cellNumber, symbol);\n        this.setState({grid: revisedGrid})\n    }\n\n    switchTurns() {\n        if(this.state.whichTurn === \"X\") {\n            this.setState({whichTurn: \"O\"});\n        }\n        else {\n            this.setState({whichTurn: \"X\"});\n        }\n    }\n\n    handleClickBlankCell(cellNumber) {\n        //Blank cells should only react if the game is not over\n        if(!this.state.gameOver) {\n            //Game has started, set newGame to false\n            if(this.state.newGame) {\n                console.log(\"New game started!\");\n                this.setState({newGame: false});\n            }\n            //Update the grid for this move and check if its a winning move\n            this.makeMove(this.state.whichTurn, cellNumber);\n            if(isThisAWinningMove(this.state.grid, cellNumber, this.state.whichTurn)) {\n                var winningSymbol = this.state.whichTurn;\n                console.log(winningSymbol + \" just won!\");\n                this.setState({gameOver: true, gameWon: true});\n                return;\n            }\n            //If the board is full, finish the game. Otherwise, switch turns\n            if(boardIsFull(this.state.grid)) {\n                console.log(\"Board is full. Game over\");\n                this.setState({gameOver: true});\n            }\n            else {\n                this.switchTurns();\n            }\n        }\n    }\n\n    handleResetClick() {\n        console.log(\"Resetting!\");\n        this.setState({\n            newGame: true,\n            gameOver: false,\n            whichTurn: \"X\",\n            grid: [['', '', ''], ['', '', ''], ['', '', '']],\n            gameWon: false\n        });\n    }\n\n    render() {\n        return (\n        <div>\n            <div className=\"centered-container\">\n            <Banner newGame={this.state.newGame} gameOver={this.state.gameOver} gameWon={this.state.gameWon} whichTurn={this.state.whichTurn}/>\n\n            <table>\n                <tbody>\n                    <tr>\n                        <td><Cell symbol={this.state.grid[0][0]} onClick={() => this.handleClickBlankCell(0)}/></td>\n                        <td><Cell symbol={this.state.grid[0][1]} onClick={() => this.handleClickBlankCell(1)}/></td>\n                        <td><Cell symbol={this.state.grid[0][2]} onClick={() => this.handleClickBlankCell(2)}/></td>\n                    </tr>\n                    <tr>\n                        <td><Cell symbol={this.state.grid[1][0]} onClick={() => this.handleClickBlankCell(3)}/></td>\n                        <td><Cell symbol={this.state.grid[1][1]} onClick={() => this.handleClickBlankCell(4)}/></td>\n                        <td><Cell symbol={this.state.grid[1][2]} onClick={() => this.handleClickBlankCell(5)}/></td>\n                    </tr>\n                    <tr>\n                        <td><Cell symbol={this.state.grid[2][0]} onClick={() => this.handleClickBlankCell(6)}/></td>\n                        <td><Cell symbol={this.state.grid[2][1]} onClick={() => this.handleClickBlankCell(7)}/></td>\n                        <td><Cell symbol={this.state.grid[2][2]} onClick={() => this.handleClickBlankCell(8)}/></td>\n                    </tr>\n                </tbody>\n            </table>\n            <button id=\"resetButton\" onClick={this.handleResetClick}>RESET</button>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default GameBoard;\n","import React from 'react';\nimport './App.css';\nimport GameBoard from './containers/GameBoard';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\n\nlibrary.add(far, faTimes);\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"centered-container\">\n        <GameBoard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}